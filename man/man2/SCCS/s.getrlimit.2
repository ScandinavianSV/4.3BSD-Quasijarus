h44459
s 00008/00008/00135
d D 6.4 87/04/03 16:36:43 bostic 6 5
c bug report 4.1BSD/sys/36
e
s 00012/00013/00131
d D 6.3 86/05/13 15:39:27 karels 5 4
c update and correct
e
s 00004/00004/00140
d D 6.2 85/06/28 17:03:28 sechrest 4 3
c Improved English
e
s 00003/00003/00141
d D 6.1 85/05/09 18:26:46 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00106/00055/00038
d D 5.1 85/05/09 18:26:05 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00093/00000/00000
d D 4.1 85/05/09 18:24:25 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH VLIMIT 2V
E 2
I 2
D 3
.TH GETRLIMIT 2 "7 July 1983"
E 3
I 3
.TH GETRLIMIT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
vlimit \- control maximum system resource consumption
E 2
I 2
getrlimit, setrlimit \- control maximum system resource consumption
E 2
.SH SYNOPSIS
D 2
.B "#include <sys/vlimit.h>"
E 2
I 2
.ft B
.nf
#include <sys/time.h>
#include <sys/resource.h>
E 2
.PP
D 2
.B vlimit(resource, value)
E 2
I 2
.ft B
getrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.PP
.ft B
setrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.fi
.ft R
E 2
.SH DESCRIPTION
D 2
Limits the consumption by the current process and each process
it creates to not individually exceed 
.I value
on the specified
.I resource.
If
.I value
is specified as \-1, then the current limit is returned and the
limit is unchanged.
The resources which are currently controllable are:
.TP 15
.B LIM_NORAISE
A pseudo-limit; if set non-zero then the limits may not be raised.
Only the super-user may remove the \fInoraise\fR restriction.
.TP 15
.B LIM_CPU
the maximum
number of cpu-seconds to be used by each process
.TP 15
.B LIM_FSIZE
the largest single file which can be created
.TP 15
.B LIM_DATA
the maximum growth of the data+stack region via
E 2
I 2
Limits on the consumption of system resources by the current process
and each process it creates may be obtained with the
.I getrlimit
call, and set with the
.I setrlimit
call.  
.PP
The
.I resource
parameter is one of the following:
.TP 17
RLIMIT_CPU
D 3
the maximum amount of cpu time (in milliseconds) to be used by
E 3
I 3
the maximum amount of cpu time (in seconds) to be used by
E 3
each process.
.TP 17
RLIMIT_FSIZE
D 4
the largest size, in bytes, of any single file which may be created.
E 4
I 4
the largest size, in bytes, of any single file that may be created.
E 4
.TP 17
RLIMIT_DATA
the maximum size, in bytes, of the data segment for a process;
this defines how far a program may extend its break with the
E 2
.IR sbrk (2)
D 2
beyond the end of the program text
.TP 15
.B LIM_STACK
the maximum
size of the automatically-extended stack region
.TP 15
.B LIM_CORE
the size of the largest core dump that will be created.
.TP 15
.B LIM_MAXRSS
a soft limit for the amount of physical memory (in bytes) to be given
to the program.  If memory is tight, the system will prefer to take memory
from processes which are exceeding their declared LIM_MAXRSS.
E 2
I 2
system call.
.TP 17
RLIMIT_STACK
the maximum size, in bytes, of the stack segment for a process;
D 5
this defines how far a program's stack segment may be extended,
either automatically by the system, or explicitly by a user with
the 
.IR sbrk (2)
system call.
E 5
I 5
this defines how far a program's stack segment may be extended.
Stack extension is performed automatically by the system.
E 5
.TP 17
RLIMIT_CORE
the largest size, in bytes, of a 
.I core
D 4
file which may be created.
E 4
I 4
file that may be created.
E 4
.TP 17
RLIMIT_RSS
D 5
the maximum size, in bytes, a process's resident set size may
grow to.  This imposes a limit on the amount of physical memory
E 5
I 5
the maximum size, in bytes, to which a process's resident set size may
grow.  This imposes a limit on the amount of physical memory
E 5
to be given to a process; if memory is tight, the system will
D 4
prefer to take memory from processes which are exceeding their
E 4
I 4
prefer to take memory from processes that are exceeding their
E 4
declared resident set size.
E 2
.PP
D 2
Because this information is stored in the per-process information
E 2
I 2
D 6
A resource limit is specified as a soft limit and a hard limit.
When a soft limit is exceeded a process may receive a signal
(for example, if the cpu time is exceeded), but it will be allowed
to continue execution until it reaches the hard limit (or modifies
E 6
I 6
A resource limit is specified as a soft limit and a hard limit.  When a
soft limit is exceeded a process may receive a signal (for example, if
the cpu time or file size is exceeded), but it will be allowed to
continue execution until it reaches the hard limit (or modifies
E 6
its resource limit).  The 
.I rlimit
structure is used to specify the hard and soft limits on a resource,
.PP
.nf
.RS
.DT
struct rlimit {
	int	rlim_cur;	/* current (soft) limit */
	int	rlim_max;	/* hard limit */
};
.RE
.fi
.PP
Only the super-user may raise the maximum limits.  Other users
may only alter 
.I rlim_cur
within the range from 0 to 
.I rlim_max
or (irreversibly) lower
.IR rlim_max .
.PP
D 3
An \*(lqinfinite\*(rq value for a limit is defined as RLIMIT_INFINITY
E 3
I 3
An \*(lqinfinite\*(rq value for a limit is defined as RLIM_INFINITY
E 3
(0x7\&f\&f\&f\&f\&f\&f\&f).
.PP
Because this information is stored in the per-process information,
E 2
this system call must be executed directly by the shell if it
is to affect all future processes created by the shell;
.I limit
is thus a built-in command to
.IR csh (1).
.PP
The system refuses to extend the data or stack space when the limits
D 2
would be exceeded in the normal way; a
E 2
I 2
would be exceeded in the normal way: a
E 2
.I break
D 5
call fails if the data space limit is reached, or the process is
killed when the stack limit is reached (since the stack cannot be
extended, there is no way to send a signal!).
E 5
I 5
call fails if the data space limit is reached.
When the stack limit is reached, the process receives
a segmentation fault (SIGSEGV); if this signal is not
caught by a handler using the signal stack, this signal
will kill the process.
E 5
.PP
D 4
A file i/o operation which would create a file which is too large
E 4
I 4
D 5
A file i/o operation that would create a file that is too large
E 4
will cause a signal SIGXFSZ to be generated, this normally terminates
E 5
I 5
D 6
A file I/O operation that would create a file that is too large
will cause a signal SIGXFSZ to be generated; this normally terminates
E 5
the process, but may be caught.
D 2
When the cpu time limit is exceeded, a signal SIGXCPU is sent to the
offending process; to allow it time to process the signal it is
given 5 seconds grace by raising the cpu time limit.
E 2
I 2
When the soft cpu time limit is exceeded, a signal SIGXCPU is sent to the
E 6
I 6
A file I/O operation that would create a file larger that the process'
soft limit will cause the write to fail and a signal SIGXFSZ to be
generated; this normally terminates the process, but may be caught.  When
the soft cpu time limit is exceeded, a signal SIGXCPU is sent to the
E 6
offending process.
.SH "RETURN VALUE
A 0 return value indicates that the call succeeded, changing
or returning the resource limit.   A return value of \-1 indicates
that an error occurred, and an error code is stored in the global
location \fIerrno\fP.
.SH "ERRORS
The possible errors are:
.TP 15
[EFAULT]
The address specified for \fIrlp\fP is invalid.
.TP 15
[EPERM]	The limit specified to \fIsetrlimit\fP would have
raised the maximum limit value, and the caller is not the super-user.
E 2
.SH SEE ALSO
D 2
csh(1)
E 2
I 2
D 5
csh(1), quota(2)
E 5
I 5
csh(1), quota(2), sigvec(2), sigstack(2)
E 5
E 2
.SH BUGS
D 2
If LIM_NORAISE is set, then no grace should be given when the cpu
time limit is exceeded.
.PP
E 2
There should be 
.I limit
and
.I unlimit
commands in
.IR sh (1)
as well as in
.IR csh.
D 2
.PP
This call is peculiar to this version of UNIX.
The options and specifications of this system call and even the call itself
are subject to change.  It may be extended or replaced by other
facilities in future versions of the system.
E 2
E 1
