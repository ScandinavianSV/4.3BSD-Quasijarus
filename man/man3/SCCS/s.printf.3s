h50812
s 00100/00041/00237
d D 6.5 88/06/05 11:32:54 bostic 7 6
c update from Chris for ANSI _doprnt; add BUGS section mentioning
c %D, %O, and %U, and that they should be going away soon
e
s 00005/00001/00274
d D 6.4 87/10/22 19:58:58 bostic 6 5
c ANSI C; sprintf now returns an int; document all return values
e
s 00001/00001/00274
d D 6.3 86/06/05 18:33:20 bloom 5 4
c fix plus because cfo decide to chang things
e
s 00040/00028/00235
d D 6.2 86/05/14 12:24:56 bloom 4 3
c rearrange the order of the conversion string and specify the order
e
s 00001/00001/00262
d D 6.1 85/05/15 15:02:59 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00073/00043/00190
d D 5.1 85/05/15 15:02:48 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00233/00000/00000
d D 4.1 85/05/15 15:02:41 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH PRINTF 3S 4/1/81
E 2
I 2
D 3
.TH PRINTF 3S "1 April 1981"
E 3
I 3
D 7
.TH PRINTF 3S "%Q%"
E 7
I 7
.TH PRINTF 3S "October 22, 1987"
E 7
E 3
E 2
.AT 3
.SH NAME
printf, fprintf, sprintf \- formatted output conversion
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B printf(format
.RB [ ,
arg ] ...
.B )
.br
.B char *format;
.PP
.B fprintf(stream, format
.RB [ ,
arg ] ...
.B )
.br
.SM
.B FILE
.B *stream;
.br
.B char *format;
.PP
.B sprintf(s, format
.RB [ ,
arg ] ...
.B )
.br
D 7
.B char *s, format;
E 7
I 7
.B char *s, *format;
E 7
I 2
.PP
.B #include <varargs.h>
.br
D 7
.B _doprnt(format, args, stream)
E 7
I 7
.B vprintf(format, args)
E 7
.br
.B char *format;
.br
D 7
.B va_list *args;
E 7
I 7
.B va_list args;
.PP
.B vfprintf(stream, format, args)
E 7
.br
.B FILE *stream;
I 7
.br
.B char *format;
.br
.B va_list args;
.PP
.B vsprintf(s, format, args)
.br
.B char *s, *format;
.br
.B va_list args;
E 7
E 2
.SH DESCRIPTION
.I Printf
places output on the standard output stream
D 2
.IR stdout .
E 2
I 2
.BR stdout .
E 2
.I Fprintf
places output on the named output
.IR stream .
.I Sprintf
places `output' in the string
D 2
.I s,
E 2
I 2
.IR s ,
E 2
followed by the character `\\0'.
I 2
D 7
All of these routines work by calling the internal
routine
.B _doprnt,
using the variable-length argument facilities of
.IR varargs (3).
E 7
I 7
Alternate forms, in which the arguments have already been
captured using the variable-length argument facilities of
.IR varargs (3),
are available under the names
.IR vprintf ,
.IR vfprintf ,
and
.IR vsprintf .
E 7
E 2
.PP
D 2
Each of these functions 
converts, formats, and prints its arguments after the first
under control of the first argument.
The first argument is a character string
which contains
two types of objects:
plain characters, which are simply copied to the
output stream,
and conversion specifications,
each of which causes conversion and printing
E 2
I 2
Each of these functions converts, formats, and prints its arguments after
the first under control of the first argument.
The first argument is a character string which contains two types of objects:
plain characters, which are simply copied to the output stream,
and conversion specifications, each of which causes conversion and printing
E 2
of the next successive
.I arg
.IR printf .
.PP
D 2
Each conversion specification is introduced by
the character
E 2
I 2
Each conversion specification is introduced by the character
E 2
.BR % .
D 4
Following the
.BR % ,
there may be
E 4
I 4
The remainder of the conversion specification includes
in the following order
E 4
.TP
D 2
\-
E 2
I 2
.B \(bu
E 2
D 4
an optional minus sign `\-' which specifies
.I "left adjustment"
D 2
of the converted value
in the
indicated field;
E 2
I 2
of the converted value in the indicated field;
E 4
I 4
D 7
Zero or more of following flags:
E 7
I 7
Zero or more of the following flags:
E 7
.RS
E 4
E 2
.TP
D 2
\-
E 2
I 2
.B \(bu
E 2
D 4
an optional digit string specifying a
.I "field width;"
D 2
if the converted value has fewer characters
than the field width
E 2
I 2
if the converted value has fewer characters than the field width
E 2
it will be blank-padded on the left (or right,
D 2
if the left-adjustment indicator has been
given) to make up the field width;
E 2
I 2
if the left-adjustment indicator has been given) to make up the field width;
E 2
if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
.TP
D 2
\-
E 2
I 2
.B \(bu
E 2
an optional period
.RB ` . '
D 2
which serves to
separate the field width from the
next digit string;
E 2
I 2
which serves to separate the field width from the next digit string;
E 2
.TP
D 2
\-
an optional digit string
specifying a
E 2
I 2
.B \(bu
an optional digit string specifying a
E 2
.I precision
D 2
which specifies
the number of digits to appear after the
decimal point, for e- and f-conversion,
or the maximum number of characters
E 2
I 2
which specifies the number of digits to appear after the
decimal point, for e- and f-conversion, or the maximum number of characters
E 2
to be printed from a string;
.TP
D 2
\-
E 2
I 2
.B \(bu
an optional `#' character
E 4
I 4
a `#' character
E 4
specifying that the value should be converted to an ``alternate form''.
For 
.BR c ,
.BR d ,
.BR s ,
and
.BR u ,
conversions, this option has no effect.  For 
.B o
conversions, the precision of the number is increased to force the first
character of the output string to a zero.  For 
.BR x ( X )
conversion, a non-zero result has the string 
.BR 0x ( 0X )
prepended to it.  For 
.BR e ,
.BR E ,
.BR f ,
.BR g ,
and
.BR G ,
conversions, the result will always contain a decimal point, even if no
digits follow the point (normally, a decimal point only appears in the
results of those conversions if a digit follows the decimal point).  For
.B g
and
.B G
conversions, trailing zeros are not removed from the result as they
D 7
would otherwise be.
E 7
I 7
would otherwise be;
E 7
I 4
.TP
.B \(bu
a minus sign `\-' which specifies
.I "left adjustment"
of the converted value in the indicated field;
.TP
.B \(bu
D 5
a `\+' character specifying that there should always be
E 5
I 5
a `+' character specifying that there should always be
E 5
D 7
a sign placed before the number when using signed conversions.
E 7
I 7
a sign placed before the number when using signed conversions;
E 7
.TP
.B \(bu
a space specifying that a blank should be left before a positive number
D 7
during a signed conversion.  A `+' overrides a space if both are used.
E 7
I 7
during a signed conversion.  A `+' overrides a space if both are used;
.TP
.B \(bu
a zero `0' character indicating that zero-padding should be used
rather than blank-padding.  A `\-' overrides a `0' if both are used;
E 7
.RE
.TP
.B \(bu
an optional digit string specifying a
.I "field width;"
if the converted value has fewer characters than the field width
it will be blank-padded on the left (or right,
D 7
if the left-adjustment indicator has been given) to make up the field width;
if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
E 7
I 7
if the left-adjustment indicator has been given) to make up the field width
(note that a leading zero is a flag,
but an embedded zero is part of a field width);
E 7
.TP
.B \(bu
D 7
an optional period
.RB ` . '
which serves to separate the field width from the next digit string;
.TP
.B \(bu
an optional digit string specifying a
E 7
I 7
an optional period, followed by
an optional digit string giving a
E 7
.I precision
which specifies the number of digits to appear after the
decimal point, for e- and f-conversion, or the maximum number of characters
D 7
to be printed from a string;
E 7
I 7
to be printed from a string; if the digit string is missing,
the precision is treated as zero;
E 7
E 4
.TP
.B \(bu
E 2
the character
.B l
specifying that a following
.BR d ,
I 7
.BR i ,
E 7
.BR o ,
.BR x ,
or
.B u
corresponds to a long integer
D 2
.I arg.
(A capitalized conversion code accomplishes
the same thing.)
E 2
I 2
D 7
.IR arg .
E 7
I 7
.IR arg ,
or that a following
.B n
corresponds to a pointer to a long integer
.IR arg ;
E 7
E 2
.TP
D 2
\-
E 2
I 2
.B \(bu
I 7
the character
.B h
specifying that a following
.BR d ,
.BR i ,
.BR o ,
.BR x ,
or
.B u
corresponds to a short integer
.IR arg ,
or that a following
.B n
corresponds to a pointer to a short integer
.IR arg ;
.TP
.B \(bu
E 7
E 2
a character which indicates the type of
conversion to be applied.
.PP
A field width or precision may be `*' instead of a digit string.
In this case an integer
.I arg
supplies
the field width or precision.
.PP
The conversion characters
and their meanings are
.TP
.B dox
The integer
.I arg
D 7
is converted to decimal, octal, or
hexadecimal notation respectively.
E 7
I 7
is converted to signed decimal, unsigned octal, or
unsigned hexadecimal notation respectively.
E 7
.TP
I 7
.B i
An alias for `d'.
.TP
E 7
.B f
The float or double
.I arg
is converted to decimal notation
in the style `[\fB\-\fR]ddd.ddd'
where the number of d's after the decimal point
is equal to the precision specification
for the argument.
If the precision
is missing,
6 digits are given;
if the precision is explicitly 0, no digits and
no decimal point are printed.
.TP
D 7
.B e
E 7
I 7
.B eE
E 7
The float or double
.I arg
is converted in the style
`[\fB\-\fR]d\fB.\fRddd\fBe\fR\(+-dd'
where there is one digit before the decimal point and
the number after is equal to the
precision specification for the argument;
when the precision is missing,
6 digits are produced.
I 7
An uppercase E is used for `E' conversion.
E 7
.TP
D 7
.B g
E 7
I 7
.B gG
E 7
The float or double
.I arg
is printed in style
D 7
.BR d ,
in style
.BR f ,
or in
style
.BR e ,
E 7
I 7
.B f
or in style
.B e
.RB ( E )
E 7
whichever gives full precision in minimum space.
.TP
.B c
The character
.I arg
is printed.
.TP
.B s
.I Arg
is taken to be a string (character pointer)
and characters from the string are printed until
a null character or until
the number of characters indicated by the precision
specification is reached;
however if the precision is 0 or missing
all characters up to a null are printed.
.TP
.B u
The unsigned integer
.I arg
is converted to decimal
and printed (the result will be in the
range 0 through MAXUINT, where MAXUINT equals 4294967295 on a VAX-11
and 65535 on a PDP-11).
.TP
I 7
.B n
.I Arg
is taken to be a pointer to an integer (possibly
.B short
or
.BR long )
through which is stored the number of characters written
to the output stream (or string) so far by this call to
.B printf
(or
.BR fprintf ,
etc.).
.TP
.B p
.I Arg
is taken to be a pointer to
.BR void ;
it is printed in style
.BR x .
.TP
E 7
.B %
Print a `%'; no argument is converted.
.PP
In no case does a non-existent or small field width
cause truncation of a field;
padding takes place only if the specified field
width exceeds the actual width.
Characters generated by
.I printf
D 7
are printed by 
E 7
I 7
are printed as by 
E 7
D 2
.IR putc (3).
E 2
I 2
.IR putc (3S).
E 2
.PP
D 6
.B Examples
E 6
I 6
.SH "RETURN VALUE"
D 7
The functions \fIprintf\fP, \fIfprintf\fP, and \fIsprintf\fP return
the number of characters printf, or -1 if an error occurred.
E 7
I 7
The functions all return
the number of characters printed, or -1 if an error occurred.
E 7
.SH EXAMPLES
E 6
.br
To print a date and time in the form `Sunday, July 3, 10:02',
where
.I weekday
and
.I month
are pointers to null-terminated strings:
.RS
.HP
.nh
printf("%s, %s %d, %02d:%02d", weekday, month, day, hour, min);
.RE
.hy
.PP
To print
.if n pi
.if t \(*p
to 5 decimals:
.IP
printf("pi = %.5f", 4*atan(1.0));
.SH "SEE ALSO"
D 2
putc(3),
scanf(3),
E 2
I 2
D 7
putc(3S),
scanf(3S),
E 2
ecvt(3)
E 7
I 7
putc(3S), scanf(3S)
E 7
.SH BUGS
D 7
Very wide fields (>128 characters) fail.
E 7
I 7
The functions still supports \fI%D\fP, \fI%O\fP, and \fI%U\fP.  Do not
use these formats, as they will be disappearing soon.
E 7
E 1
