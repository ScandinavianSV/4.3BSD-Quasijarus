h03296
s 00007/00008/00180
d D 6.4 86/05/14 10:24:45 karels 6 5
c add getdtablesize, delete unimplemented
e
s 00040/00001/00148
d D 6.3 85/08/26 23:30:56 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00019/00011/00130
d D 6.2 85/05/22 18:30:33 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00004/00001/00137
d D 6.1 85/05/09 16:06:25 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00119/00036/00019
d D 5.1 85/05/09 16:06:15 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00055/00000/00000
d D 4.1 85/05/09 16:06:06 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH OPEN 2 
E 2
I 2
D 3
.TH OPEN 2 "2 July 1983"
E 3
I 3
.TH OPEN 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
open \- open for reading or writing
E 2
I 2
open \- open a file for reading or writing, or create a new file
E 2
.SH SYNOPSIS
.nf
D 2
.B open(name, mode)
.B char *name;
E 2
I 2
.ft B
#include <sys/file.h>
.PP
.ft B
open(path, flags, mode)
char *path;
int flags, mode;
E 2
.fi
.SH DESCRIPTION
.I Open
opens the file
D 2
.I name
for reading
(if
E 2
I 2
.I path
for reading and/or writing, as specified by the
.I flags
argument and returns a descriptor for that file.
The
.I flags
argument may indicate the file is to be
created if it does not already exist (by specifying the
O_CREAT flag), in which case the file is created with mode
E 2
.I mode
D 2
is 0),
writing (if
.I mode
is 1) or for both reading and writing
(if
.I mode
is 2).
.I Name
E 2
I 2
as described in
.IR chmod (2)
and modified by the process' umask value (see
.IR umask (2)).
.PP
.I Path
E 2
is the address of a string of ASCII characters representing
a path name, terminated by a null character.
I 2
The flags specified are formed by
.IR or 'ing
the following values
E 2
.PP
D 2
The file is positioned at the beginning (byte 0).
The returned file descriptor must be used for subsequent calls
for other input-output functions on the file.
E 2
I 2
.RS
 O_RDONLY	open for reading only
 O_WRONLY	open for writing only
 O_RDWR	open for reading and writing
 O_NDELAY	do not block on open
 O_APPEND	append on each write
 O_CREAT	create file if it does not exist
 O_TRUNC	truncate size to 0
 O_EXCL	error if create and file exists
.RE
.PP
Opening a file with O_APPEND set causes each write on the file
to be appended to the end.  If O_TRUNC is specified and the
file exists, the file is truncated to zero length.
If O_EXCL is set with O_CREAT, then if the file already
exists, the open returns an error.  This can be used to
implement a simple exclusive access locking mechanism.
I 3
If O_EXCL is set and the last component of the pathname is
a symbolic link, the open will fail even if the symbolic
link points to a non-existent name.
E 3
If the O_NDELAY flag is specified and the open call would result
in the process being blocked for some reason (e.g. waiting for
carrier on a dialup line), the open returns immediately. 
The first time the process attempts to perform i/o on the open
file it will block (not currently implemented).
.PP
Upon successful completion a non-negative integer termed a
file descriptor is returned.
The file pointer used to mark the current position within the
file is set to the beginning of the file.
.PP
The new descriptor is set to remain open across
.IR execve
system calls; see
.IR close (2).
.PP
D 6
No process may have more than {OPEN_MAX} file descriptors open
simultaneously.
E 6
I 6
The system imposes a limit on the number of file descriptors
open simultaneously by one process.
.IR Getdtablesize (2)
returns the current system limit.
E 6
.SH "ERRORS
The named file is opened unless one or more of the
following are true:
.TP 15
D 4
[EPERM]
The pathname contains a character with the high-order bit set.
.TP 15
E 4
[ENOTDIR]
A component of the path prefix is not a directory.
.TP 15
I 4
[EINVAL]
The pathname contains a character with the high-order bit set.
.TP 15
[ENAMETOOLONG]
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
.TP 15
E 4
[ENOENT]
O_CREAT is not set and the named file does not exist.
.TP 15
I 5
[ENOENT]
A component of the path name that must exist does not exist.
.TP 15
E 5
[EACCES]
D 4
A component of the path prefix denies search permission.
E 4
I 4
Search permission is denied for a component of the path prefix.
E 4
.TP 15
[EACCES]
The required permissions (for reading and/or writing)
are denied for the named flag.
.TP 15
I 5
[EACCES]
O_CREAT is specified,
the file does not exist,
and the directory in which it is to be created
does not permit writing.
.TP 15
E 5
I 4
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
.TP 15
E 4
[EISDIR]
The named file is a directory, and the arguments specify
it is to be opened for writting.
.TP 15
[EROFS]
The named file resides on a read-only file system,
and the file is to be modified.
.TP 15
[EMFILE]
D 6
{OPEN_MAX} file descriptors are currently open.
E 6
I 6
The system limit for open file descriptors per process has already been reached.
E 6
.TP 15
I 5
[ENFILE]
The system file table is full.
.TP 15
E 5
[ENXIO]
The named file is a character special or block
special file, and the device associated with this special file
does not exist.
.TP 15
I 4
D 6
[ENXIO]
The O_NDELAY flag is given, and the file is a communications device
on which their is no carrier present.
.TP 15
E 6
I 5
[ENOSPC]
O_CREAT is specified,
the file does not exist,
and the directory in which the entry for the new file is being placed
cannot be extended because there is no space left on the file
system containing the directory.
.TP 15
[ENOSPC]
O_CREAT is specified,
the file does not exist,
and there are no free inodes on the file system on which the
file is being created.
.TP 15
[EDQUOT]
O_CREAT is specified,
the file does not exist,
and the directory in which the entry for the new fie
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
.TP 15
[EDQUOT]
O_CREAT is specified,
the file does not exist,
and the user's quota of inodes on the file system on
which the file is being created has been exhausted.
.TP 15
E 5
[EIO]
An I/O error occurred while making the directory entry or
allocating the inode for O_CREAT.
.TP 15
E 4
[ETXTBSY]
The file is a pure procedure (shared text) file that is being
executed and the \fIopen\fP call requests write access.
.TP 15
[EFAULT]
.I Path
points outside the process's allocated address space.
.TP 15
D 4
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
.TP 15
E 4
[EEXIST]
D 5
O_EXCL was specified and the file exists.
E 5
I 5
O_CREAT and O_EXCL were specified and the file exists.
E 5
D 4
.TP 15
[ENXIO]
The O_NDELAY flag is given, and the file is a communications device
on which their is no carrier present.
E 4
.TP 15
[EOPNOTSUPP]
An attempt was made to open a socket (not currently implemented).
E 2
.SH "SEE ALSO"
D 2
creat(2), read(2), write(2), dup(2), close(2)
.SH DIAGNOSTICS
The value \-1 is returned
if the file does not exist,
if one of the necessary directories
does not exist or is unreadable, if the file is not
readable (resp. writable), or if too many files are open.
.SH "ASSEMBLER (PDP-11)"
(open = 5.)
.br
.B sys open; name; mode
.br
(file descriptor in r0)
.SH BUGS
It should be possible to optionally open files for writing with exclusive use,
and to optionally call
.I open
without the possibility of hanging waiting for carrier on communication lines.
E 2
I 2
D 6
chmod(2), close(2), dup(2), lseek(2), read(2), write(2), umask(2)
E 6
I 6
chmod(2), close(2), dup(2), getdtablesize(2),
lseek(2), read(2), write(2), umask(2)
E 6
E 2
E 1
