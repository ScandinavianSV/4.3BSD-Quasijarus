h08832
s 00002/00002/00082
d D 6.2 85/06/30 17:06:51 sechrest 4 3
c improved english
e
s 00001/00001/00083
d D 6.1 85/05/09 18:21:47 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00013/00020/00071
d D 5.1 85/05/09 18:21:17 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00091/00000/00000
d D 4.1 85/05/09 18:20:45 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH VFORK 2V
E 2
I 2
D 3
.TH VFORK 2 "2 July 1983"
E 3
I 3
.TH VFORK 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
vfork \- spawn new process in a virtual memory efficient way
.SH SYNOPSIS
D 2
.B vfork()
E 2
I 2
.B pid = vfork()
.br
.B int pid;
E 2
.SH DESCRIPTION
.I Vfork
can be used to create new processes without fully copying the address
space of the old process, which is horrendously inefficient in a paged
environment.  It is useful when the purpose of
.IR fork (2)
would have been to create a new system context for an
D 2
.I exec.
E 2
I 2
.IR execve .
E 2
.I Vfork
differs from
.I fork
in that the child borrows the parent's memory and thread of
control until a call to
D 2
.IR exec (2)
E 2
I 2
.IR execve (2)
E 2
or an exit (either by a call to
.IR exit (2)
or abnormally.)
The parent process is suspended while the child is using its resources.
.PP
.I Vfork
returns 0 in the child's context and (later) the pid of the child in
the parent's context.
.PP
.I Vfork
can normally be used just like
.I fork.
It does not work, however, to return while running in the childs context
D 4
from the procedure which called
E 4
I 4
from the procedure that called
E 4
.I vfork
since the eventual return from
.I vfork
would then return to a no longer existent stack frame.
Be careful, also, to call
.I _exit
rather than
.I exit
if you can't
D 2
.I exec,
E 2
I 2
.IR execve ,
E 2
since
.I exit
will flush and close standard I/O channels, and thereby mess up the
parent processes standard I/O data structures.
(Even with
.I fork
it is wrong to call
.I exit
since buffered data would then be flushed twice.)
D 2
.PP
Similarly when using the new signal mechanism of
.IR sigset (3)
mechanism be sure to call
.I sigsys
rather than
.IR signal (2).
E 2
.SH SEE ALSO
D 2
fork(2), exec(2), sigsys(2), wait(2),
E 2
I 2
fork(2), execve(2), sigvec(2), wait(2),
E 2
.SH DIAGNOSTICS
Same as for
.IR fork .
.SH BUGS
D 2
This system call may be unnecessary if the system sharing mechanisms allow
.I fork
to be implemented more efficiently; users should not depend on the memory
E 2
I 2
This system call will be eliminated when proper system sharing
mechanisms are implemented. 
Users should not depend on the memory
E 2
sharing semantics of
.I vfork
D 2
as it could, in that case, be made synonymous to
.I fork.
E 2
I 2
as it will, in that case, be made synonymous to
.IR fork .
E 2
.PP
To avoid a possible deadlock situation,
D 4
processes which are children in the middle
E 4
I 4
processes that are children in the middle
E 4
of a
.I vfork
are never sent SIGTTOU or SIGTTIN signals; rather,
output or
.IR ioctl s
are allowed
and input attempts result in an end-of-file indication.
D 2
.PP
This call is peculiar to this version of UNIX.
E 2
E 1
