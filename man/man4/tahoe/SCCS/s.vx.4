h44878
s 00068/00008/00023
d D 6.2 87/06/30 21:22:27 sam 2 1
c update addresses to reflect change form 24 to 32 bit addresses 
c in config file; rewrite cy.4 and vd.4 as well as vx.4
e
s 00031/00000/00000
d D 6.1 86/11/24 18:24:04 mckusick 1 0
c from CCI
e
u
U
t
T
I 1
.\" Copyright (c) 1986 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH VIOC 4 "%Q%"
E 2
I 2
.TH VX 4 "%Q%"
E 2
.UC 7
.SH NAME
D 2
vioc \- VIOC-X communications multiplexer
E 2
I 2
vx \- VIOC-X communications multiplexor
E 2
.SH SYNOPSIS
D 2
device vx0 at vba0 csr 0xfe4000
E 2
I 2
.B "device vx0 at vba? csr 0xfffe0000 vector vackint vcmdrsp vunsol"
E 2
.SH DESCRIPTION
A VIOC-X provides 16 communication lines with partial modem control,
adequate for UNIX dialup use.
D 2
Each line attached to the VIOC-X communications multiplexer
E 2
I 2
Each line attached to the VIOC-X communications multiplexor
E 2
behaves as described in
.IR tty (4)
and may be set to run at any of 16 speeds; see
.IR tty (4)
for the encoding.
D 2
.PP
Each VIOC-X controller uses 3 entries in the SCB for command terminated,
acknowledge, and unsolicited (input) interrupts.
These entries start at 0x40 for the 1st controller, 0x44 for the 2nd, etc.
E 2
.SH FILES
/dev/tty[0-9][0-9]
.br
/dev/ttyd[0-9a-f]		dialups
.SH "SEE ALSO"
tty(4)
I 2
.SH DIAGNOSTICS
\fBvx%d: vc proc err, ustat %x\fP.
.PP
\fBvx%d: vc uqual err, uqual %x\fP.
.PP
\fBvx%d: %d exceeds silo size\fP.
.PP
\fBvx%d: receiver overrun\fP.
.PP
\fBVIOC-BOP no. %d at %x\fP.
The system identified a vioc supporting the bit oriented protocol.
The number \fB%d\fP is the board number assigned by the system
while the address \fB%x\fP is the address of the command control
block for the vioc.
.PP
\fBvx%d: unknown type %x\fP.
The system encountered a vioc of unknown type during autoconfiguration.
.PP
\fBvx%d: didn't respond to LIDENT\fP.
The device did not respond to the configuration command that
sets the interrupt vectors and port configuration.
.PP
\fBvx%d: %s%s, ports %d-%d\fP.
This is informatory message printed during autoconfiguration
indicating the type of hardware present the port configuration.
.PP
\fBvx%d: no buffers\fP.
All the command buffers were in use; this indicates the device
is constipated for some reason.
.PP
\fBvx%d: setq overflow\fP.
An attempt to append a command to an existing command buffer
failed because the buffer was full or the hardware doesn't
support this facility.
.PP
\fBvx%d: cmd q overflow\fP.
An attempt to place a new command on the command queue failed
because it was full.  The device is either overloaded or hung
up for some reason.  If this happens, the system tries to
reset the device to unwedge it.
.PP
\fBvx%d INTR ERR type %x v_dcd %x\fP.
An error was returned by the device in response to some command.
The command identifier and data carrier detect mask are printed
followed by the contents of the command buffer in error.
.PP
\fBvx%d: vcmdrsp interrupt\fP.
A command response interrupt was received from a bop (bit oriented
protocol) vioc.  This should not happen.
.PP
\fBvx%d: cmdresp debug\fP.
.PP
\fBvx%d: vunsol from BOP\fP.
An unsolicited interrupt was received from a bop vioc.  This should
not happen.
.PP
\fBvx%d: interrupt q overflow\fP.
The queue of pending interrupts to be delivered to the vioc is
full.  This is probably due to the vioc being wedged.  The system
resets the vioc if this occurs.
.PP
\fBvx%d: reset...\fP.
The system attempted to reset the vioc.
.SH BUGS
E 2
E 1
