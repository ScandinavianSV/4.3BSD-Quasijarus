h26382
s 00007/00000/00118
d D 6.4 87/03/16 17:37:18 bostic 6 5
c cleanup
e
s 00065/00100/00053
d D 6.3 87/03/13 21:56:06 bostic 5 4
c updated, added -d flag, structs, enums, unions
e
s 00011/00000/00142
d D 6.2 85/05/30 23:28:06 sam 4 3
c update for -f flag
e
s 00013/00004/00129
d D 6.1 85/04/29 14:21:00 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00029/00016/00104
d D 5.1 85/04/29 14:20:50 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00120/00000/00000
d D 4.1 85/04/29 14:20:41 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH CTAGS 1 4/1/81
E 2
I 2
D 3
.TH CTAGS 1 "25 August 1982"
E 3
I 3
.TH CTAGS 1 "%Q%"
E 3
E 2
.UC 4
.SH NAME
ctags \- create a tags file
.SH SYNOPSIS
.B ctags
[ 
D 2
.B \-u
] [
.B \-v
] [
.B \-w
] [
.B \-x
E 2
I 2
D 5
.B \-BFatuwvx
E 5
I 5
.B \-BFadtuwvx
E 5
I 4
] [
D 5
.B \-f 
E 5
I 5
.B \-f
E 5
.I tagsfile
E 4
E 2
]
name ...
.SH DESCRIPTION
D 5
.I Ctags
makes a tags file for
.IR ex (1)
D 3
from the specified C, Pascal and Fortran sources.
E 3
I 3
from the specified C, Pascal, Fortran, YACC, lex, and lisp sources.
E 3
A tags file gives the locations of specified objects (in this case
D 2
functions) in a group of files.
Each line of the tags file contains the function name,
the file in which it is defined, and a scanning pattern used to find
the function definition.  These are given in separate fields on the line,
separated by blanks or tabs.
E 2
I 2
functions and typedefs) in a group of files.  Each line of the tags
file contains the object name, the file in which it is defined, and
an address specification for the object definition. Functions are
searched with a pattern, typedefs with a line number. Specifiers are
given in separate fields on the line, separated by blanks or tabs.
E 2
Using the
.I tags
file,
.I ex
D 2
can quickly find these function definitions.
E 2
I 2
can quickly find these objects definitions.
E 5
I 5
\fICtags\fP makes a tags file for \fIex\fP(1) from the specified C,
Pascal, Fortran, YACC, lex, and lisp sources.  A tags file gives the
locations of specified objects in a group of files.  Each line of the
tags file contains the object name, the file in which it is defined,
and a search pattern for the object definition, separated by white-space.
Using the \fItags\fP file, \fIex\fP(1) can quickly locate these object
definitions.  Depending on the options provided to \fIctags\fP,
objects will consist of subroutines, typedefs, defines, structs,
enums and unions.
E 5
E 2
.PP
I 6
Yacc and lex files each have a special tag.  \fIYyparse\fP is the start
of the second section of the yacc file, and \fIyylex\fP is the start of
the second section of the lex file.
.PP
E 6
D 5
If the
.B \-x
flag is given, 
.I ctags
D 2
produces a list of function names, the line number and file
E 2
I 2
produces a list of object names, the line number and file
E 2
name on which each is defined, as well as the text of that line
and prints this on the standard output.  This is a simple index
which can be printed out as an off-line readable function index.
E 5
I 5
If the \fB-x\fP flag is given, \fIctags\fP produces a list of object
names, the line number and file name on which each is defined, as well
as the text of that line and prints this on the standard output.  This
is a simple index which can be printed out as an off-line readable
function index.
E 5
.PP
D 5
If the
.B \-v
flag is given,
an index of the form expected by
.IR vgrind (1)
is produced on the standard output.
This listing contains the function name,
file name, and page number
(assuming 64 line pages).
Since the output will be sorted into lexicographic order,
it may be desired to run the output through
.BR "sort \-f" .
E 5
I 5
If the \fB-v\fP flag is given, an index of the form expected by
\fIvgrind\fP(1) is produced on the standard output.  This listing
contains the object name, file name, and page number (assuming 64
line pages).  Since the output will be sorted into lexicographic order,
it may be desired to run the output through \fBsort -f\fP.
E 5
Sample use:
.nf
	ctags \-v files | sort \-f > index
	vgrind \-x index
.fi
I 4
.PP
D 5
Normally 
.I ctags
places the tag descriptions in a file called
.IR tags ;
this may be overridden with the
.B \-f
option.
E 5
I 5
Normally \fIctags\fP places the tag descriptions in a file called
\fItags\fP; this may be overridden with the \fB-f\fP option.
E 5
E 4
.PP
D 3
Files whose name ends in 
E 3
I 3
D 5
Files whose names end in 
E 3
.B \.c
or
.B \.h
are assumed to be C source files and are searched for C routine and
macro definitions.
D 3
Others are first examined to see if they contain any Pascal or
E 3
I 3
Files whose names end in
.B \.y
are assumed to be YACC source files.
Files whose names end in
.B \.l
are assumed to be either lisp files
if their first non-blank character is `;', `(', or `[',
or lex files otherwise.
Other files are first examined to see if they contain any Pascal or
E 3
Fortran routine definitions; if not, they are processed again
looking for C definitions.
E 5
I 5
Files whose names end in \fB.c\fP or \fB.h\fP are assumed to be C
source files and are searched for C style routine and macro definitions.
Files whose names end in \fB.y\fP are assumed to be YACC source files.
Files whose names end in \fB.l\fP are assumed to be lisp files if their
first non-blank character is `;', `(', or `[', otherwise, they are
treated as lex files.  Other files are first examined to see if they
contain any Pascal or Fortran routine definitions, and, if not, are
searched for C style definitions.
E 5
.PP
Other options are:
.TP 5
I 2
.B \-F
D 5
use forward searching patterns (/.../) (default).
E 5
I 5
use forward searching patterns (/.../) (the default).
E 5
.TP 5
.B \-B
use backward searching patterns (?...?).
.TP 5
.B \-a
D 5
append to tags file.
E 5
I 5
append to \fItags\fP file.
E 5
.TP 5
I 5
.B \-d
create tags for \fI#defines\fP that don't take arguments; \fI#defines\fP
that take arguments are tagged automatically.
.TP 5
E 5
.B \-t
D 5
create tags for typedefs.
E 5
I 5
create tags for typedefs, structs, unions, and enums.
E 5
.TP 5
E 2
.B \-w
D 5
suppressing warning diagnostics.
E 5
I 5
suppress warning diagnostics.
E 5
.TP 5
.B \-u
D 5
causing the specified files to be
.I updated
in tags, that is, all references to them are deleted,
and the new values are appended to the file.
(Beware: this option is implemented in a way which is rather slow;
it is usually faster to simply rebuild the
.I tags
file.)
E 5
I 5
update the specified files in the \fItags\fP file, that is, all
references to them are deleted, and the new values are appended to the
file.  (Beware: this option is implemented in a way which is rather
slow; it is usually faster to simply rebuild the \fItags\fP file.)
E 5
.PP
D 5
The tag
.I main
is treated specially in C programs.
The tag formed is created by prepending
.I M
to the name of the file, with a trailing .c removed, if
any, and leading pathname components also removed.
This makes use of
.I ctags
practical in directories with more than one program.
E 5
I 5
The tag \fImain\fP is treated specially in C programs.  The tag formed
is created by prepending \fIM\fP to the name of the file, with the
trailing \fB.c\fP and any leading pathname components removed.  This
makes use of \fIctags\fP practical in directories with more than one
program.
E 5
.SH FILES
.DT
D 5
tags		output tags file
E 5
I 5
tags		default output tags file
I 6
.SH DIAGNOSTICS
\fICtags\fP exits with a value of 1 if an error occurred, where
duplicate objects are not considered errors, 0 otherwise.
E 6
E 5
.SH SEE ALSO
ex(1), vi(1)
.SH AUTHOR
D 5
Ken Arnold; FORTRAN added by Jim Kleckner; Bill Joy
added Pascal and
.B \-x,
replacing
D 2
.I cxref.
E 2
I 2
.I cxref;
C typedefs added by Ed Pelegri-Llopart.
E 5
I 5
Ken Arnold; FORTRAN added by Jim Kleckner; Bill Joy added Pascal and
\fB-x\fP, replacing \fIcxref\fP; C typedefs added by Ed Pelegri-Llopart.
E 5
E 2
.SH BUGS
Recognition of \fBfunctions\fR, \fBsubroutines\fR and \fBprocedures\fR
D 5
for FORTRAN and Pascal is done is a very simpleminded way.
No attempt is made to deal with block structure; if you have two
Pascal procedures in different blocks with the same name you lose.
E 5
I 5
for FORTRAN and Pascal is done is a very simpleminded way.  No attempt
is made to deal with block structure; if you have two Pascal procedures
in different blocks with the same name you lose.  \fICtags\fP doesn't
understand about Pascal types.
E 5
.PP
D 5
The method of deciding whether to look for C or Pascal and FORTRAN
E 5
I 5
The method of deciding whether to look for C, Pascal or FORTRAN
E 5
functions is a hack.
I 2
.PP
D 5
Does not know about #ifdefs.
.PP
Should know about Pascal types.
Relies on the input being well formed to detect typedefs.
Use of -tx shows only the last line of typedefs.
I 3

E 5
I 5
\fICtags\fP relies on the input being well formed, and any syntactical
errors will completely confuse it.  It also finds some legal syntax
confusing; for example, as it doesn't understand \fI#ifdef\fP's,
(incidentally, that's a feature, not a bug) any code with unbalanced
braces inside \fI#ifdef\fP's will cause it to become somewhat disoriented.
In a similar fashion, multiple line changes within a definition will
cause it to enter the last line of the object, rather than the first, as
the searching pattern.  The last line of multiple line \fItypedef\fP's
will similarly be noted.
E 5
E 3
E 2
E 1
