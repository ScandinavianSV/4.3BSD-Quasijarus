h16986
s 00007/00000/00047
d D 6.4 85/05/31 16:31:31 dist 10 9
c Add copyright
e
s 00001/00001/00046
d D 6.3 84/04/17 10:23:57 peter 9 8
c since ex_data.c should be read-only but /tmp/$$.c can't be
c use cat instead of cp to copy.
e
s 00010/00009/00037
d D 6.2 84/04/17 10:01:55 peter 8 7
c ex reformatting commands change as ``num'' becomes ``cat -n''
c with slightly differing output format.
e
s 00001/00001/00045
d D 6.1 80/10/19 01:23:22 mark 7 6
c preliminary release 3.6 10/18/80
e
s 00000/00000/00046
d D 5.1 80/08/20 16:18:02 mark 6 5
c Release 3.5, August 20, 1980
e
s 00003/00000/00043
d D 4.2 80/08/01 20:45:04 mark 5 4
c Bill added more buffers, and I put in sccs.
e
s 00035/00032/00008
d D 4.1 80/08/01 00:21:19 mark 4 3
c release 3.4, June 24, 1980
e
s 00000/00000/00040
d D 3.1 80/07/31 23:46:35 mark 3 2
c release 3.3, Feb 2, 1980
e
s 00000/00000/00040
d D 2.1 80/07/31 23:22:40 mark 2 1
c release 3.2, Jan 4, 1980
e
s 00040/00000/00000
d D 1.1 80/07/31 23:01:14 mark 1 0
c date and time created 80/07/31 23:01:14 by mark
e
u
U
t
T
I 10
#
# Copyright (c) 1980 Regents of the University of California.
# All rights reserved.  The Berkeley software License Agreement
# specifies the terms and conditions for redistribution.
#
#	%W% (Berkeley) %G%
#
E 10
I 8

E 8
I 1
#
# remake options -- this isn't necessary unless you add/delete options
#
D 4
	onintr ifintr
	cp ex_data.c /tmp/$$.c
	ex - /tmp/$$.c <<'%'
		g/^#include/d
		w
		q
E 4
I 4
onintr ifintr
D 9
cp ex_data.c /tmp/$$.c
E 9
I 9
cat < ex_data.c > /tmp/$$.c
E 9
ex - /tmp/$$.c <<'%'
	g/^#include/d
	w
	q
E 4
'%'
D 4
	cc -E $* /tmp/$$.c >/tmp/foo.c
	ex - /tmp/foo.c <<'X'
		g/^# /d
		set sh=/bin/csh
		g/^[ 	]*$/d
		1,/options/d
		/}/-1,$d
		1,$s/	"//
		1,$s/".*//
		1m$
		w! ex_vars.h
		!rm -f %; num ex_vars.h >%
		e
		$t0
		1s/......../     0  /
		1,$s/\(......\)\(.*\)/#define	\U\2\L	\1/
		1,$s/	 */	/g
		g/  */s//	/g
		w
		!rm -f ex_vars.h; expand -8,24 % >ex_vars.h
		e! ex_vars.h
		$i
E 4
I 4
cc -E $* /tmp/$$.c >/tmp/foo.c
ex - /tmp/foo.c <<'X'
	" delete all preprocessor output (# line, etc)
	g/^# /d
	set sh=/bin/csh
	" delete junk (all but data lines)
	g/^[ 	]*$/d
D 7
	1,/options/d
E 7
I 7
	1,/option options/d
E 7
	/}/-1,$d
	" get rid of all of line but option name
D 8
	1,$s/	"//
E 8
I 8
	1,$s/[ 	]*"//
E 8
	1,$s/".*//
D 8
	1m$	" kludge since options start at 0 but num at 1
	%!num
	$t0	" unkludge
	1s/......../     0  /	" unkludge
E 8
I 8
	" begin kludge since options start at 0 but cat -n starts at 1
	"              move first to end and later move it back and renumber
	1m$
	%!cat -n
	$t0
	1s/[0-9][0-9]*/0/
	" end kludge
E 8
	" make #define lines
D 8
	1,$s/\(......\)\(.*\)/#define	\U\2\L	\1/
	" get rid of extra blanks, turning into (single) tabs.
	1,$s/	 */	/g
	g/  */s//	/g
E 8
I 8
	1,$s/[ 	]*\([0-9][0-9]*\)[ 	]*\(.*\)/#define	\U\2\L	\1/
E 8
	" filter through expand to make it line up nice
	%!expand -8\,24
	" blank line and number of options.
	$i
E 4

.
D 4
		$s/e[ 	].*[ 	]/e	NOPTS	/
		w
		q
E 4
I 4
	$s/e[ 	].*[ 	]/e	NOPTS	/
I 5
	0a
	/*  sccs id   @(#)  ex_vars.h  %W% %G%  */
.
E 5
	w! ex_vars.h
	q
E 4
'X'
ifintr:
D 4
	rm /tmp/foo.c
E 4
I 4
rm /tmp/foo.c
E 4
E 1
