h51460
s 00001/00001/00221
d D 6.4 86/05/20 08:34:30 anne 6 5
c spelling correction
e
s 00002/00002/00220
d D 6.3 86/01/08 13:39:38 mckusick 5 4
c SIGUSR does not cause a core dump if not caught or ignored
e
s 00004/00001/00218
d D 6.2 85/11/06 12:02:52 bloom 4 3
c change return value of handler, add new signals for 4.3
e
s 00001/00001/00218
d D 6.1 85/05/09 17:51:23 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00147/00128/00072
d D 5.1 85/05/09 17:50:37 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00200/00000/00000
d D 4.1 85/05/09 17:49:52 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH SIGNAL 2 
E 2
I 2
D 3
.TH SIGNAL 3C "15 June 1983"
E 3
I 3
.TH SIGNAL 3C "%Q%"
E 3
E 2
.UC 4
I 2
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
E 2
.SH NAME
D 2
signal \- catch or ignore signals
E 2
I 2
signal \- simplified software signal facilities
E 2
.SH SYNOPSIS
.nf
.B #include <signal.h>
.PP
.B (*signal(sig, func))()
D 4
.B void (*func)();
E 4
I 4
.B int (*func)();
E 4
.fi
.SH DESCRIPTION
D 2
.IR N.B. :
The system currently supports two signal implementations.
The one described here is standard in version 7 UNIX systems,
and is retained for backward compatabililty.
The one described in
.IR sigsys (2)
as supplemented by
.IR sigset (3)
provides for the needs of the job control mechanisms 
used by
.IR csh (1),
and corrects the bugs in this older implementation of signals,
allowing programs
which process interrupts
to be written
reliably.
E 2
I 2
.I Signal
is a simplified interface to the more general
.IR sigvec (2)
facility.
E 2
.PP
A signal
is generated by some abnormal event,
D 2
initiated either by user at a terminal (quit, interrupt),
E 2
I 2
initiated by a user at a terminal (quit, interrupt, stop),
E 2
by a program error (bus error, etc.),
D 2
or by request of another program (kill).
Normally all signals
cause termination of the receiving process,
but a
E 2
I 2
by request of another program (kill),
or when a process is stopped because it wishes to access
its control terminal while in the background (see
.IR tty (4)).
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals cause termination of the receiving process if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
Except for the SIGKILL and SIGSTOP
signals, the
E 2
.I signal
D 2
call allows them either to be ignored
E 2
I 2
call allows signals either to be ignored
E 2
or to cause an interrupt to a specified location.
D 2
Here is the list of signals with names as in
the include file.
E 2
I 2
The following is a list of all signals with
names as in the include file
.RI < signal.h >:
E 2
.LP
.nf
D 2
.ta \w'SIGMMMM 'u +\w'15*  'u
E 2
I 2
.ta \w'SIGVTALRM 'u +\w'15*  'u
E 2
SIGHUP	1	hangup
SIGINT	2	interrupt
SIGQUIT	3*	quit
D 2
SIGILL	4*	illegal instruction (not reset when caught)
SIGTRAP	5*	trace trap (not reset when caught)
E 2
I 2
SIGILL	4*	illegal instruction
SIGTRAP	5*	trace trap
E 2
SIGIOT	6*	IOT instruction
SIGEMT	7*	EMT instruction
SIGFPE	8*	floating point exception
SIGKILL	9	kill (cannot be caught or ignored)
SIGBUS	10*	bus error
SIGSEGV	11*	segmentation violation
SIGSYS	12*	bad argument to system call
SIGPIPE	13	write on a pipe with no one to read it
SIGALRM	14	alarm clock
SIGTERM	15	software termination signal
D 2
	16	unassigned
E 2
I 2
SIGURG	16\*b	urgent condition present on socket
SIGSTOP	17\*d	stop (cannot be caught or ignored)
SIGTSTP	18\*d	stop signal generated from keyboard
SIGCONT	19\*b	continue after stop
SIGCHLD	20\*b	child status has changed
SIGTTIN	21\*d	background read attempted from control terminal
SIGTTOU	22\*d	background write attempted to control terminal
SIGIO	23\*b	i/o is possible on a descriptor (see \fIfcntl\fP(2))
SIGXCPU	24	cpu time limit exceeded (see \fIsetrlimit\fP(2))
SIGXFSZ	25	file size limit exceeded (see \fIsetrlimit\fP(2))
SIGVTALRM	26	virtual time alarm (see \fIsetitimer\fP(2))
SIGPROF	27	profiling timer alarm (see \fIsetitimer\fP(2))
I 4
SIGWINCH	28\*b	Window size change
D 5
SIGUSR1	30\*b	User defined signal 1
SIGUSR2	31\*b	User defined signal 2
E 5
I 5
SIGUSR1	30	User defined signal 1
SIGUSR2	31	User defined signal 2
E 5
E 4
E 2
.fi
D 2
.IR N.B. :
There are actually more signals; see
.IR sigsys (2);
the signals listed here are those of standard version 7.
E 2
.PP
The starred signals in the list above cause a core image
if not caught or ignored.
.PP
If
.I func
is SIG_DFL, the default action
for signal
.I sig
D 2
is reinstated; this default is termination,
sometimes with a core image.
E 2
I 2
is reinstated; this default is termination
(with a core image for starred signals)
except for signals marked with \*b or \*d.
Signals marked with \*b are discarded if the action
is SIG_DFL; signals marked
with \*d cause the process to stop.
E 2
If
.I func
D 2
is SIG_IGN the signal is ignored.
Otherwise
when the signal occurs
E 2
I 2
is SIG_IGN the signal is subsequently ignored
and pending instances of the signal are discarded.
Otherwise, when the signal occurs
D 6
further occurences of the signal are
E 6
I 6
further occurrences of the signal are
E 6
automatically blocked and
E 2
.I func
D 2
will be called with the
signal number as argument.
A return from the function will
continue the process at the point it was interrupted.
E 2
I 2
is called.
E 2
.PP
D 2
Except as indicated,
a signal is reset to SIG_DFL after being caught.
Thus if it is desired to
catch every such signal,
the catching routine must
issue another
.I signal
call.
E 2
I 2
A return from the function unblocks
the handled signal and
continues the process at the point it was interrupted.
\fBUnlike previous signal facilities, the handler \fIfunc\fP
remains installed after a signal has been delivered.\fP
E 2
.PP
D 2
If, when using this (older) signal interface,
a caught signal occurs
during certain system calls, the call terminates prematurely.
E 2
I 2
If a caught signal occurs
during certain system calls, causing
the call to terminate prematurely, the call
is automatically restarted.
E 2
In particular this can occur
D 2
during an
.IR ioctl ,
.IR read ,
E 2
I 2
during a
.I read
E 2
or
.IR write (2)
D 2
on a slow device (like a terminal; but not a file);
and during
.I pause
or
E 2
I 2
on a slow device (such as a terminal; but not a file)
and during a
E 2
.IR wait (2).
D 2
When such a signal occurs, the saved user status
is arranged in such a way that when return from the
signal-catching takes place, it will appear that the
system call returned an error status.
The user's program may then, if it wishes,
re-execute the call.
E 2
.PP
The value of
.I signal
is the previous (or initial)
value of
.I func
for the particular signal.
.PP
After a
D 2
.IR  fork (2)
E 2
I 2
.IR fork (2)
or
.IR vfork (2)
E 2
the child inherits
all signals.
D 2
.IR  Exec (2)
resets all
caught signals to default action.
.PP
If a process is using the mechanisms of
.IR sigsys (2)
and
.IR sigset (3)
then many of these calls are automatically restarted
(See
.IR sigsys (2)
and
.IR jobs (3)
for details).
E 2
I 2
.IR  Execve (2)
resets all caught signals to the default action;
ignored signals remain ignored.
.SH "RETURN VALUE
The previous action is returned on a successful call.
Otherwise, \-1 is returned and 
.I errno
is set to indicate the error.
.SH ERRORS
.I Signal
will fail and no action will take place if one of the
following occur:
.TP 15
[EINVAL]
.I Sig
is not a valid signal number.
.TP 15
[EINVAL]
An attempt is made to ignore or supply a handler for SIGKILL
or SIGSTOP.
.TP 15
[EINVAL]
An attempt is made to ignore SIGCONT (by default SIGCONT
is ignored).
E 2
.SH "SEE ALSO"
D 2
sigsys(2),
E 2
kill(1),
D 2
kill(2),
ptrace(2),
setjmp(3),
sigset(3)
.SH DIAGNOSTICS
The value (int)\-1 is returned if the
given signal is out of range.
.SH BUGS
The traps should be distinguishable by extra arguments
to the signal handler, and all hardware supplied parameters should
be made available to the signal routine.
E 2
I 2
ptrace(2), kill(2),
sigvec(2), sigblock(2), sigsetmask(2), sigpause(2),
sigstack(2), setjmp(3), tty(4)
.SH "NOTES  (VAX-11)"
The handler routine can be declared:
E 2
.PP
D 2
If a repeated signal arrives before the last one can be
reset, there is no chance to catch it
(however this is
.B not
true if you use
.IR sigsys (2)
and
.IR sigset (3)).
E 2
I 2
    handler(sig, code, scp)
E 2
.PP
D 2
The type specification of the routine and its
.I func
argument are problematical.
.SH "ASSEMBLER (PDP-11)"
(signal = 48.)
.br
.B sys  signal; sig; label
.br
(old label in r0)
E 2
I 2
Here
.I sig
is the signal number, into which the hardware faults and traps are
mapped as defined below.  Code is a parameter which is either a constant
as given below or, for compatibility mode faults, the code provided by
the hardware. 
.I Scp
is a pointer to the
.I "struct sigcontext"
used by the system to restore the process context from before
the signal.
Compatibility mode faults are distinguished from the
other SIGILL traps by having PSL_CM set in the psl.
E 2
.PP
D 2
If
.I label
is 0,
default action is reinstated.
If
.I label
is 1, the signal is ignored.
Any other even
.I label
specifies an address in the process
where an interrupt is simulated.
An RTI or RTT instruction will return from the
interrupt.
.SH "NOTES (VAX-11)"
See
.IR sigsys (2)
for information on how hardware faults are mapped into signals.
E 2
I 2
The following defines the mapping of hardware traps to signals
and codes.  All of these symbols are defined in
.RI < signal.h >:
.LP
.ta \w'     Floating/decimal divide by zero   'u +\w'15*  'u +8n
.nf
   Hardware condition	Signal	Code

Arithmetic traps:
   Integer overflow	SIGFPE	FPE_INTOVF_TRAP
   Integer division by zero	SIGFPE	FPE_INTDIV_TRAP
   Floating overflow trap	SIGFPE	FPE_FLTOVF_TRAP
   Floating/decimal division by zero	SIGFPE	FPE_FLTDIV_TRAP
   Floating underflow trap	SIGFPE	FPE_FLTUND_TRAP
   Decimal overflow trap	SIGFPE	FPE_DECOVF_TRAP
   Subscript-range	SIGFPE	FPE_SUBRNG_TRAP
   Floating overflow fault	SIGFPE	FPE_FLTOVF_FAULT
   Floating divide by zero fault	SIGFPE	FPE_FLTDIV_FAULT
   Floating underflow fault	SIGFPE	FPE_FLTUND_FAULT
Length access control	SIGSEGV
Protection violation	SIGBUS
Reserved instruction	SIGILL	ILL_RESAD_FAULT
Customer-reserved instr.	SIGEMT
Reserved operand	SIGILL	ILL_PRIVIN_FAULT
Reserved addressing	SIGILL	ILL_RESOP_FAULT
Trace pending	SIGTRAP
Bpt instruction	SIGTRAP
Compatibility-mode	SIGILL	hardware supplied code
Chme	SIGSEGV
Chms	SIGSEGV
Chmu	SIGSEGV
.fi
E 2
E 1
