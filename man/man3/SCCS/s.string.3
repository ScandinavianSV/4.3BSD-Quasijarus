h47622
s 00030/00051/00051
d D 6.5 87/10/22 11:59:10 bostic 7 6
c give s1/s2 meaningful names if ambiguous
e
s 00003/00003/00099
d D 6.4 87/08/03 17:18:32 bostic 6 5
c change strcasencmp to strncasecmp
e
s 00011/00002/00091
d D 6.3 87/07/02 09:28:15 bostic 5 4
c added strcasecmp() and strcasencmp()
e
s 00002/00006/00091
d D 6.2 87/04/25 14:04:33 bostic 4 3
c bug report 4.2BSD/man/31
e
s 00001/00001/00096
d D 6.1 85/05/15 15:52:52 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00010/00019/00087
d D 5.1 85/05/15 15:52:37 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00106/00000/00000
d D 4.1 85/05/15 15:52:25 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH STRING 3 
E 2
I 2
D 3
.TH STRING 3  "19 January 1983"
E 3
I 3
.TH STRING 3  "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 5
strcat, strncat, strcmp, strncmp, strcpy, strncpy, strlen, index, rindex \- string operations
E 5
I 5
D 6
strcat, strncat, strcmp, strncmp, strcasecmp, strcasencmp, strcpy,
E 6
I 6
strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp, strcpy,
E 6
strncpy, strlen, index, rindex \- string operations
E 5
.SH SYNOPSIS
.nf
I 2
.B #include <strings.h>
.PP
E 2
D 7
.B char *strcat(s1, s2)
.B char *s1, *s2;
E 7
I 7
.B char *strcat(s, append)
.B char *s, *append;
E 7
.PP
D 7
.B char *strncat(s1, s2, n)
.B char *s1, *s2;
E 7
I 7
.B char *strncat(s, append, count)
.B char *s, *append;
.B int count;
E 7
.PP
.B strcmp(s1, s2)
.B char *s1, *s2;
.PP
D 7
.B strncmp(s1, s2, n)
E 7
I 7
.B strncmp(s1, s2, count)
E 7
.B char *s1, *s2;
I 7
.B int count;
E 7
.PP
I 5
.B strcasecmp(s1, s2)
.B char *s1, *s2;
.PP
D 6
.B strcasencmp(s1, s2, n)
E 6
I 6
D 7
.B strncasecmp(s1, s2, n)
E 7
I 7
.B strncasecmp(s1, s2, count)
E 7
E 6
.B char *s1, *s2;
I 7
.B int count;
E 7
.PP
E 5
D 7
.B char *strcpy(s1, s2)
.B char *s1, *s2;
E 7
I 7
.B char *strcpy(to, from)
.B char *to, *from;
E 7
.PP
D 7
.B char *strncpy(s1, s2, n)
.B char *s1, *s2;
E 7
I 7
.B char *strncpy(to, from, count)
.B char *to, *from;
.B int count;
E 7
.PP
.B strlen(s)
.B char *s;
.PP
.B char *index(s, c)
.B char *s, c;
.PP
.B char *rindex(s, c)
.B char *s, c;
.fi
.SH DESCRIPTION
These functions operate on null-terminated strings.
They do not check for overflow of any receiving string.
.PP
D 7
.I Strcat
appends a copy of string
.I s2
to the end of string
.IR s1 .
.I Strncat
copies at most
.I n
D 2
characters.
Both return a pointer to the null-terminated result.
E 2
I 2
characters.  Both return a pointer to the null-terminated result.
E 7
I 7
\fIStrcat\fP appends a copy of string \fIappend\fP to the end of string
\fIs\fP. \fIStrncat\fP copies at most \fIcount\fP characters.  Both
return a pointer to the null-terminated result.
E 7
E 2
.PP
D 7
.I Strcmp
compares its arguments and returns an integer
D 2
greater than, equal to, or less than 0,
according as
E 2
I 2
greater than, equal to, or less than 0, according as
E 2
.I s1
D 2
is lexicographically greater than, equal to, or
less than
E 2
I 2
is lexicographically greater than, equal to, or less than
E 2
.IR s2 .
.I Strncmp
makes the same comparison but looks at at most
.I n
D 5
characters.
E 5
I 5
D 6
characters.  \fIStrcasecmp\fP and \fIstrcasencmp\fP are identical
E 6
I 6
characters.  \fIStrcasecmp\fP and \fIstrncasecmp\fP are identical
E 6
in function, but are case insensitive.  The returned lexicographic
difference reflects a conversion to lower-case.
E 7
I 7
\fIStrcmp\fP compares its arguments and returns an integer greater than,
equal to, or less than 0, according as \fIs1\fP is lexicographically
greater than, equal to, or less than \fIs2\fP.  \fIStrncmp\fP makes the
same comparison but looks at at most \fIcount\fP characters.
\fIStrcasecmp\fP and \fIstrncasecmp\fP are identical in function, but are
case insensitive.  The returned lexicographic difference reflects a
conversion to lower-case.
E 7
E 5
.PP
D 7
.I Strcpy
copies string
.I s2
to
.I s1,
stopping after the null character has been moved.
.I Strncpy
copies exactly
.I n
D 2
characters,
truncating or null-padding
E 2
I 2
characters, truncating or null-padding
E 2
.I s2;
D 2
the target may not be null-terminated if the length
of
E 2
I 2
the target may not be null-terminated if the length of
E 2
.I s2
is
.I n
D 2
or more.
Both return
E 2
I 2
or more.  Both return
E 2
.IR s1 .
E 7
I 7
\fIStrcpy\fP copies string \fIfrom\fP to \fIto\fP, stopping after the
null character has been moved.  \fIStrncpy\fP copies exactly \fIcount\fP
characters, appending nulls if \fIfrom\fP is less than \fIcount\fP
characters in length; the target may not be null-terminated if the
length of \fIfrom\fP is \fIcount\fP or more.  Both return \fIto\fP.
E 7
.PP
D 7
.I Strlen
returns the number of non-null characters in
.IR s .
E 7
I 7
\fIStrlen\fP returns the number of non-null characters in \fIs\fP.
E 7
.PP
.I Index
.RI ( rindex )
D 2
returns a pointer to the first (last)
occurrence of character 
E 2
I 2
returns a pointer to the first (last) occurrence of character 
E 2
D 4
.I c
in string
.I s,
or zero if
.I c
does not occur in  the string.
E 4
I 4
\fIc\fP in string \fIs\fP or zero if \fIc\fP does not occur in
the string.  Setting \fIc\fP to NULL works.
E 4
D 2
.SH BUGS
.I Strcmp 
uses native character comparison, which is signed
on PDP11's and VAX-11's, unsigned on other machines.
E 2
E 1
